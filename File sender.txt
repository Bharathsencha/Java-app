This program is a simple GUI-based file sender using Java Swing for the graphical interface and networking components (sockets) for file transmission. 

1. Imports:
java
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;

javax.swing.*: This imports the Java Swing library for creating the graphical user interface (GUI), including components like buttons, labels, and frames.
java.awt.*: This imports the Abstract Window Toolkit (AWT) package, providing components for window-based applications like layout managers and fonts.
java.awt.event.*: This package is used to handle events like button clicks, user actions, etc.
java.io.*: These classes help with input/output operations, especially for file handling.
java.net.*: Provides classes for networking, like `ServerSocket` and `Socket` for communication between devices.

2.Class Definition:

public class FileSenderGUI {
    private JFrame frame;
    private JButton selectFileButton;
    private JLabel statusLabel;
    private File selectedFile;

- This defines the class `FileSenderGUI` that will handle the file-sending process.
- It contains components:
  - `JFrame`: The main window frame.
  - `JButton`: A button for selecting the file to send.
  - `JLabel`: A label to show the status (whether a file is selected, being sent, etc.).
  - `File`: A `File` object to store the file that the user selects.

3.Constructor (GUI Setup):

public FileSenderGUI() {
    // Create the main frame
    frame = new JFrame("File Sender");
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.setSize(400, 200);
    frame.setLayout(new BorderLayout());

- This part creates a new window (JFrame) with the title "File Sender" and sets the size to 400x200 pixels.
- `frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);` ensures the program closes when the user clicks the close button.
- `frame.setLayout(new BorderLayout());` sets the layout manager of the frame, which arranges components (like buttons, labels) in five regions: North, South, East, West, and Center.

4. Creating a Panel and Adding Components:

    JPanel panel = new JPanel();
    panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
    panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

- A panel is created to hold the button and the label.
- `BoxLayout.Y_AXIS` makes sure the components are arranged vertically.
- `BorderFactory.createEmptyBorder` adds some padding (10px on each side) around the panel for spacing.

5.Adding the Button and Label:

    selectFileButton = new JButton("Select File to Send");
    selectFileButton.setAlignmentX(Component.CENTER_ALIGNMENT);
    selectFileButton.setFont(new Font("Arial", Font.BOLD, 14));

    statusLabel = new JLabel("No file selected.");
    statusLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
    statusLabel.setFont(new Font("Arial", Font.PLAIN, 12));

- `selectFileButton`: A button that allows users to select a file from their computer.
- `statusLabel`: A label to show the status, such as the selected file's name or updates about file transfer.

6. Adding Action Listener (File Selection):

    selectFileButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            JFileChooser fileChooser = new JFileChooser();
            int returnValue = fileChooser.showOpenDialog(null);
            if (returnValue == JFileChooser.APPROVE_OPTION) {
                selectedFile = fileChooser.getSelectedFile();
                statusLabel.setText("Selected file: " + selectedFile.getName());
                sendFile(selectedFile);
            }
        }
    });

- An action listener is attached to the button. When clicked, it opens a file chooser dialog (`JFileChooser`) for the user to select a file.
- If the user selects a file, the statusLabel is updated with the name of the selected file, and the `sendFile` method is called to transfer the file.

7. File Sending Logic (Networking):

private void sendFile(File file) {
    ServerSocket serverSocket = null;
    Socket socket = null;
    FileInputStream fileInputStream = null;
    BufferedOutputStream bufferedOutputStream = null;
    try {
        serverSocket = new ServerSocket(5000, 50, InetAddress.getByName("192.168.7.26"));
        statusLabel.setText("Waiting for client connection...");

- `ServerSocket`: This is a socket that listens for incoming connections on port 5000. The IP address `192.168.7.26` is the server's address.
- The `statusLabel` is updated to inform the user that the server is waiting for a client connection.

        socket = serverSocket.accept();
        statusLabel.setText("Client connected. Sending file...");

- `accept()`: This waits for a client to connect. Once a client connects, the status is updated.

        byte[] fileBytes = new byte[(int) file.length()];
        fileInputStream = new FileInputStream(file);
        bufferedOutputStream = new BufferedOutputStream(socket.getOutputStream());
        int bytesRead = fileInputStream.read(fileBytes, 0, fileBytes.length);
        bufferedOutputStream.write(fileBytes, 0, bytesRead);
        bufferedOutputStream.flush();
        statusLabel.setText("File sent successfully!");

- `fileBytes`: A byte array is created to hold the contents of the file.
- The file is read using a `FileInputStream`, and the bytes are sent over the socket using `BufferedOutputStream`.
- After sending the file, the status label is updated to indicate the success of the file transfer.

8. Error Handling and Cleanup:

    } catch (IOException e) {
        e.printStackTrace();
        statusLabel.setText("Failed to send file.");
    } finally {
        try {
            if (fileInputStream != null) fileInputStream.close();
            if (bufferedOutputStream != null) bufferedOutputStream.close();
            if (socket != null) socket.close();
            if (serverSocket != null) serverSocket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

- `catch` block : If there is any error, it prints the stack trace and updates the status label with an error message.
- `finally` block : This ensures that all resources (sockets and streams) are closed properly to avoid memory leaks.

9.Main Method:

public static void main(String[] args) {
    new FileSenderGUI();  // Launch the GUI
}

- The main method creates a new instance of `FileSenderGUI`, which launches the GUI and makes it functional.

Summary
This code creates a simple file sender application:
- The user selects a file from their system.
- The file is sent over the network to a client using sockets.
- The program provides feedback through the status label regarding the current state (file selection, waiting for a client, file sent).

This setup is useful for creating basic file-sharing systems, and it can be extended with more robust error handling, client-side logic, and encryption for real-world use.
===============================================================================================================================================================================================
===============================================================================================================================================================================================
===============================================================================================================================================================================================
File Reciver:
1. Imports:
```java
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
```
- `javax.swing.*`: Imports Swing components to build the graphical user interface (GUI), including buttons, labels, and frames.
- `java.awt.*`: Provides GUI-related classes, such as layout managers and fonts.
- `java.awt.event.*`: Handles user actions (e.g., button clicks).
- `java.io.*`: Handles input/output operations (reading and writing files).
- `java.net.*`: Provides networking capabilities (e.g., socket programming).

2.Class Definition:
```java
public class FileReceiverGUI {
    private JFrame frame;
    private JButton receiveFileButton;
    private JLabel statusLabel;
    private JTextField ipField;
```
- Defines the class `FileReceiverGUI`, which contains the logic for receiving files.
- The key components are:
  - `JFrame`: The main window.
  - `JButton`: A button to initiate the file-receiving process.
  - `JLabel`: Displays the status of the file transfer.
  - `JTextField`: A text field for entering the IP address of the sender.

 3.Constructor (Setting Up the GUI):
```java
public FileReceiverGUI() {
    // Create the main frame
    frame = new JFrame("File Receiver");
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.setSize(400, 250);
    frame.setLayout(new BorderLayout());
```
- A new window (`JFrame`) is created with the title "File Receiver" and size 400x250 pixels.
- `frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);` ensures the program exits when the window is closed.
- `frame.setLayout(new BorderLayout());` sets the layout of the frame, allowing components to be arranged in different regions.

4.Adding Components (IP Field, Button, Label):
```java
JLabel ipLabel = new JLabel("Enter Server IP:");
ipField = new JTextField(15);
receiveFileButton = new JButton("Receive File");
statusLabel = new JLabel("Waiting to receive file...");
```
- `ipLabel`: A label prompting the user to enter the serverâ€™s IP address.
- `ipField`: A text field where the user enters the IP address (pre-filled with a placeholder IP).
- `receiveFileButton`**: A button that starts the file-receiving process when clicked.
- `statusLabel`: A label that shows the current status of the file reception (initially "Waiting to receive file...").

5. Button Action Listener (Receiving the File):
```java
receiveFileButton.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        receiveFile();
    }
});
```
- An action listener is attached to the `receiveFileButton`. When the user clicks the button, the `receiveFile()` method is called to handle the file transfer.

6. The `receiveFile` Method (File Reception Logic):
```java
private void receiveFile() {
    Socket socket = null;
    FileOutputStream fileOutputStream = null;
    BufferedInputStream bufferedInputStream = null;
```
- Declares the networking and file-related objects:
  - `Socket`: Used to connect to the server.
  - `FileOutputStream`: Writes the received file data to the local file system.
  - `BufferedInputStream`: Reads data from the socket in a buffered manner (improves performance).

7. File Selection (Where to Save the File):
```java
JFileChooser fileChooser = new JFileChooser();
fileChooser.setDialogTitle("Select Save Location");
fileChooser.setSelectedFile(new File("received_file.txt"));
int userSelection = fileChooser.showSaveDialog(null);
```
- `JFileChooser` opens a file chooser dialog, allowing the user to select the location where the received file will be saved. A default file name (`received_file.txt`) is provided, but the user can change it.
- If the user approves the file selection (`JFileChooser.APPROVE_OPTION`), the file is saved to the chosen location.

8.Connecting to the Server:
```java
String serverIP = ipField.getText().trim();
socket = new Socket(serverIP, 5000);  // Use entered IP address
statusLabel.setText("Connected to server. Receiving file...");
```
- Retrieves the IP address entered by the user in the `ipField`. If the field is empty, it prompts the user to enter a valid IP.
- `socket = new Socket(serverIP, 5000);`: Connects to the file senderâ€™s IP address on port 5000.
- Updates the `statusLabel` to indicate that the connection was successful and the file is being received.

9.Receiving the File:
```java
bufferedInputStream = new BufferedInputStream(socket.getInputStream());
byte[] buffer = new byte[1024];
int bytesRead;
while ((bytesRead = bufferedInputStream.read(buffer)) != -1) {
    fileOutputStream.write(buffer, 0, bytesRead);
}
```
- The file data is read from the socket using a `BufferedInputStream` and written to the file using a `FileOutputStream`.
- A buffer of 1024 bytes is used to read chunks of data. The program continues reading until thereâ€™s no more data (`read()` returns `-1`).

10. Updating Status and Cleanup:

statusLabel.setText("File received successfully! Saved to: " + saveFile.getAbsolutePath());

- Once the file is successfully received and saved, the status label is updated with the message "File received successfully!" and the path where the file was saved.

11. Error Handling and Resource Cleanup:

} catch (IOException e) {
    e.printStackTrace();
    statusLabel.setText("Failed to receive file.");
} finally {
    try {
        if (fileOutputStream != null) fileOutputStream.close();
        if (bufferedInputStream != null) bufferedInputStream.close();
        if (socket != null) socket.close();
    } catch (IOException e) {
        e.printStackTrace();
    }
}

- If an exception occurs (e.g., a connection issue), the error message is printed, and the status label is updated with "Failed to receive file."
- The `finally`* block ensures that all streams and sockets are closed to free resources and avoid memory leaks.

12. Main Method:
public static void main(String[] args) {
    new FileReceiverGUI();  // Launch the GUI
}
This is the entry point of the program. When the program is executed, an instance of `FileReceiverGUI` is created, which launches the GUI and makes the file receiver functional.

Summary:
1. The program creates a GUI where the user can enter the server's IP address.
2. It provides an option to select where the file should be saved.
3. Once the connection to the server is established, the program receives the file and saves it to the selected location.
4. The user is informed about the status of the file reception (successful, failed, etc.) through a label in the GUI.

Sources : 
https://www.youtube.com/watch?v=Kmgo00avvEw
https://www.youtube.com/watch?v=ytJTSyUYifY
https://www.youtube.com/watch?v=ScUJx4aWRi0
https://github.com/fm-sys/snapdrop-android
