Overview:
This Java program is a "File Sender" GUI that allows the user to select a file, generate a 6-digit verification code and send
the file over a network connection (localhost) to a receiver. The file is sent with the code to ensure secure file reception. 
The program uses "Socket" to establish the connection between the sender and receiver and "ObjectOutputStream" to send both 
the verification code and file data.

Components:
1. JFrame: The main GUI window.
2. JButton: A button that allows the user to select a file and send it.
3. FileChooser: To let the user choose the file to send.
4. Random : Used to generate a 6-digit random verification code.
5. ServerSocket and Socket : Used for network communication between sender and receiver.
6. ObjectOutputStream: Used to send the verification code and file data.

Detailed Explanation of the Code:

1. Class Declaration:
   --->
   public class FileSender1 extends JFrame {
   
   - The "FileSender1" class extends "JFrame" which creates a window for the GUI.
   - This class handles the file selection  generation of the verification code and file sending process.

2.Constructor ("FileSender1"):
   --->
   public FileSender1() {
       super("File Sender (Localhost)");
       setLayout(new FlowLayout());
       selectFileButton = new JButton("Select File and Send");
       add(selectFileButton);
   
   - "super("File Sender (Localhost)")" sets the window title.
   - "setLayout(new FlowLayout())" defines how the components will be arranged in the window.
   - A button "selectFileButton" is created with the label "Select File and Send" and added to the window.

3. Button Action Listener:
   --->
   selectFileButton.addActionListener(e -> {
       JFileChooser fileChooser = new JFileChooser();
       int result = fileChooser.showOpenDialog(null);
       if (result == JFileChooser.APPROVE_OPTION) {
           selectedFile = fileChooser.getSelectedFile();
           generatedCode = generateCode(); // Generate 6-digit code
           JOptionPane.showMessageDialog(this, "Generated Code: " + generatedCode);
           sendFile();
       }
   });
   
   - When the user clicks the "Select File and Send" button, a "JFileChooser" dialog is displayed, allowing the user to select a file.
   - If a file is selected ("APPROVE_OPTION"), the file is stored in "selectedFile".
   - A random 6-digit verification code is generated by calling "generateCode()".
   - The generated code is displayed to the user using "JOptionPane.showMessageDialog()".
   - The method "sendFile()" is called to initiate the file sending process.

4. Setting Window Size and Closing Operation :
   ---->
   setSize(300, 100);
   setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
   setVisible(true);
   
   - This code sets the window size to 300x100 pixels and ensures that the application closes when the user clicks the close 
     button on the window.

5. Method: "generateCode()" :
   --->
   private String generateCode() {
       Random rand = new Random();
       return String.format("%06d", rand.nextInt(1000000)); // Generate 6-digit code
   }
   
   - This method generates a random 6-digit verification code using "Random".
   - "rand.nextInt(1000000)" generates a random integer between 0 and 999,999, and "String.format("%06d", ...)" 
      formats the number to always be 6 digits (pads with leading zeros if necessary).

6. Method: "sendFile()":
   --->
   public void sendFile() {
       try (ServerSocket serverSocket = new ServerSocket(1234);
            Socket socket = serverSocket.accept();
            FileInputStream fileIn = new FileInputStream(selectedFile);
            ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream())) {
   
   - A "erverSocket" is created on port 1234 to listen for incoming connections.
   - "socket.accept()" waits for a connection from the receiver.
   - A "FileInputStream" is used to read the selected file and "ObjectOutputStream" is used to send data to the receiver.

7. Sending the Verification Code and File Information:
   ---->
   out.writeObject(generatedCode); // Send code to receiver
   out.writeObject(selectedFile.getName()); // Send file name
   
   - The verification code is sent first using "out.writeObject(generatedCode)".
   - The file name is also sent using "out.writeObject(selectedFile.getName())" so that the receiver can save the file with the 
     correct name and extension.

8. Sending the File Data :
   ---->

   byte[] buffer = new byte[4096];
   int bytesRead;
   while ((bytesRead = fileIn.read(buffer)) != -1) {
       out.write(buffer, 0, bytesRead); // Send file data in chunks
   }
   out.flush(); // Ensure all data is sent
   
   - The file is read in 4096-byte chunks using "fileIn.read(buffer)".
   - The data is sent to the receiver in chunks using "out.write(buffer, 0, bytesRead)".
   - After all data is sent, "out.flush()" ensures that the output stream is flushed and all data is sent to the receiver.

9.Success Message :
  ---->
   JOptionPane.showMessageDialog(this, "File sent successfully!");
   
   - A message is displayed to the user indicating that the file has been sent successfully.

10. Exception Handling :
    --->

    catch (IOException e) {
        e.printStackTrace();
    }
    
   - If any "IOException" occurs during file sending (e.g., network issues, file read errors), it is caught,
     and the stack trace is printed for debugging.

11.Main Method ("main") :
    --->\
    public static void main(String[] args) {
        new FileSender1(); // Launch the FileSender GUI
    }
    
   - This method initializes the "FileSender1" class, starting the GUI and allowing the user to select a file and send it.

Summary:
-> The program creates a GUI window where the user can select a file to send.
-> A random 6-digit verification code is generated and displayed to the user.
-> The selected file, along with the verification code and file name, is sent to the receiver over a socket connection.
-> The program handles file reading and writing in chunks to avoid memory overload for large files.
-> Once the file is sent successfully, a confirmation message is shown to the user.